#!/bin/bash

# Copyright 2012-2021 Wim Muskee <wimmuskee@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# root check
[ $(whoami) == "root" ] && echo "Don't use this tool logged in as root." && exit 1

VERSION="2.4.0"
VERB="ListRecords"
CONFIGFILE="/etc/shell-oaiharvester/config.xml"
INSTALLDIR="/usr/share/shell-oaiharvester"
COMPRESS="false"
LISTREPOS="false"
MIGRATE="false"
TEST="false"
TMP=""
PID="$$"

# Override CONFIGFILE if local one is found
if [ -f "${HOME}/.config/shell-oaiharvester/config.xml" ]; then
	CONFIGFILE="${HOME}/.config/shell-oaiharvester/config.xml"
fi

function usage {
cat <<EOF
Usage: $0 [OPTION]

Harvest an OAI-PMH target that is configured. Use the configuration file to configure each
repository you want to harvest.

Options:
  -c, --config[=path]           Set a custom configuration file to use. By default, the one
                                in $HOME/.config/shell-oaiharvester/config.xml (if present)
                                or /etc/shell-oaiharvester/config.xml is used.
  -d, --dev                     Harvest from development source directory.
  -h, --help                    Displays the shell-oaiharvester help message.
  -l, --list-repos              List all repositories in config.
  -m, --migrate                 Migrate repository records in recordpath to version 2.0.0 dirs.
  -n, --no-records              When this is set, no record content is saved, only an
                                empty file.
  -q, --quiet                   Do not echo notices.
  -r, --repository[=id]         Sets the repository identifier to harvest. This corresponds
                                with the identifier in the config file.
  -t, --test                    Do not harvest, but test if the repository validates.
      --test-strict             Same as "-t", but not ignoring strict validation errors.
  -v, --version                 Displays the shell-oaiharvester version.
EOF
}

function cleanup {
	arg=${1:-1}

	if [ ! -z ${TMP} ]; then
		if [ "${arg}" == 0 ]; then
			notice "Removing temporary workfiles"
			rm -rf ${TMP}
		else
			notice "Maybe you want to see or delete the temporary workfiles in ${TMP}"
		fi
	fi

	exit $arg
}

function die {
	echo "Error: $@" >&2
	cleanup 1
}

trap cleanup SIGHUP SIGINT SIGTERM

# Reading options
while [[ "$#" -gt 0 ]]; do
	case $1 in
		--config|-c) shift; CONFIGFILE=$1 ;;
		--dev|-d) INSTALLDIR="libs" ;;
		--help|-h) usage; exit 0 ;;
		--repository|-r) shift; REPOSITORY=$1 ;;
		--list-repos|-l) LISTREPOS="true" ;;
		--migrate|-m) MIGRATE="true" ;;
		--quiet|-q) QUIET="true" ;;
		--no-records|-n) VERB="ListIdentifiers" ;;
		--test|-t) TEST="true" ;;
		--test-strict) TEST_STRICT="true" ;;
		--version|-v) echo "${VERSION}"; exit 0 ;;
		*) die "$0: Unknown command input" ;;
	esac
	shift
done

# dependency check
for dep in date curl grep printf sed xsltproc; do
	which ${dep} &>/dev/null || die "Dependency not found: ${dep}"
done

# Loading functions
source "${INSTALLDIR}/common.sh" 2>/dev/null || die "Function library not found: ${INSTALLDIR}/functions.sh"
source "${INSTALLDIR}/functions.sh" 2>/dev/null || die "Function library not found: ${INSTALLDIR}/functions.sh"

# Check config file
if [ -z ${CONFIGFILE} ] || [ ! -f ${CONFIGFILE} ]; then
	die "Config file not found: ${CONFIGFILE}"
fi

# Perform list repos, otherwise continue with regular harvesting
if [ "${LISTREPOS}" == "true" ]; then
	getGenericConfig "listrepos"
	exit 0
fi

# Check repository id
[ -z ${REPOSITORY} ] && die "No repository id provided"


# Reading oai repository info
RECORDPATH=$(getGenericConfig "recordpath")
TMP=$(getGenericConfig "temppath")
LOGFILE=$(getGenericConfig "logfile")
RECORDLOGFILE=$(getGenericConfig "recordlogfile")
CURL_OPTS=$(getGenericConfig "curlopts")
UPDATE_CMD=$(getGenericConfig "updatecmd")
DELETE_CMD=$(getGenericConfig "deletecmd")
BASEURL=$(getRepositoryConfig "baseurl" ${REPOSITORY})
PREFIX=$(getRepositoryConfig "metadataprefix" ${REPOSITORY})
SET=$(getRepositoryConfig "set" ${REPOSITORY})
FROM=$(getRepositoryConfig "from" ${REPOSITORY})
UNTIL=$(getRepositoryConfig "until" ${REPOSITORY})
RESUMPTION=$(getRepositoryConfig "resumptiontoken" ${REPOSITORY})
REPOSITORY_RECORDPATH=$(getRepositoryConfig "repository_path" ${REPOSITORY})
REPOSITORY_UPDATE_CMD=$(getRepositoryConfig "repository_updatecmd" ${REPOSITORY})
REPOSITORY_DELETE_CMD=$(getRepositoryConfig "repository_deletecmd" ${REPOSITORY})
REPOSITORY_CURL_OPTS=$(getRepositoryConfig "repository_curlopts" ${REPOSITORY})
REPOSITORY_USERNAME=$(getRepositoryConfig "username" ${REPOSITORY})
REPOSITORY_PASSWORD=$(getRepositoryConfig "password" ${REPOSITORY})

# checking required values
[ -z ${BASEURL} ] && die "No baseurl found for repository: ${REPOSITORY}"
[ -z ${PREFIX} ] && die "No prefix found for repository: ${REPOSITORY}"

# Setting other arguments if set in config.
[ ! -z ${SET} ] && URI_SET="&set=${SET}"
[ ! -z ${UNTIL} ] && URI_UNTIL="&until=$UNTIL"

# Set some sane defaults
# all workfiles go into a random tmp directory
RECORDPATH=${RECORDPATH:-/tmp}
TMP=${TMP:-/tmp/oaiharvester}
TMP="${TMP}/${PID}"
REPOSITORY_RECORDPATH=${REPOSITORY_RECORDPATH:-${RECORDPATH}/${REPOSITORY}}
REPOSITORY_STATUSFILE="${REPOSITORY_RECORDPATH}/.oaiharvester"
LOGFILE=${LOGFILE:-/tmp/oaiharvester-log.csv}
RECORDLOGFILE=${RECORDLOGFILE:-/dev/null}

# Override common curl options if repository curl options are defined
[ ! -z "${REPOSITORY_CURL_OPTS}" ] && CURL_OPTS="${REPOSITORY_CURL_OPTS}"

# Setting credentials for curl
CREDENTIALS=${REPOSITORY_USERNAME}
[ ! -z "${REPOSITORY_PASSWORD}" ] && CREDENTIALS="${CREDENTIALS}:${REPOSITORY_PASSWORD}"
[ ! -z "${CREDENTIALS}" ] && CURL_OPTS="${CURL_OPTS} -u ${CREDENTIALS}" 

notice "Creating temporary workdir in ${TMP}"
mkdir -p ${TMP} 2>/dev/null || die "Not able to create temporary workdir: ${TMP}"

# Find out if we want to validate only
# no need for logfile in this step
if [ "${TEST}" == "true" -o "${TEST_STRICT}" == "true" ]; then
	testRepository
	exit 0
fi

if [ "${MIGRATE}" == "true" ]; then
	source "${INSTALLDIR}/migrations.sh"
	notice "Starting record subdir migration in ${REPOSITORY_RECORDPATH}"
	rearrangeRecordsDataSubdirs ${REPOSITORY_RECORDPATH}
	exit 0
fi

touch ${LOGFILE} 2>/dev/null || die "Logfile not writable: ${LOGFILE}"
touch ${RECORDLOGFILE} 2>/dev/null || die "Record logfile not writable: ${RECORDLOGFILE}"

# Making sure the repository storage dirs exists
if [ -d ${REPOSITORY_RECORDPATH} ]; then
	notice "Using repository storage in ${REPOSITORY_RECORDPATH}"
else
	notice "Creating repository storage in ${REPOSITORY_RECORDPATH}"
	mkdir -p ${REPOSITORY_RECORDPATH} 2>/dev/null || die "Not able to create repository storage: ${REPOSITORY_RECORDPATH}"
fi

# Try to load repository status
if [ -f ${REPOSITORY_STATUSFILE} ]; then
	source "${REPOSITORY_RECORDPATH}/.oaiharvester"
else
	# if not there, either new, or pre-2.0.0
	if [ -f "${REPOSITORY_RECORDPATH}/lasttimestamp.txt" ]; then
		REPOSITORY_MAJORVER=1
		LASTTIMESTAMP=$(cat "${REPOSITORY_RECORDPATH}/lasttimestamp.txt")
	fi
fi

# Check if we use a pre-2.0.0 repository format
if [[ ! -z ${LASTTIMESTAMP} && ( ${REPOSITORY_MAJORVER} -eq 1 || "${REPO_VER}" == "2.0.0_alpha" ) ]]; then
	die "The repository format has been updated. You need to perform a migration before continuing."
fi

# only check status code first time calling
checkHttpStatus $(getHttpStatus "${BASEURL}?verb=Identify")

# and retrieve Identify for granularity and optional firsttimestamp
fetchUrl "${BASEURL}?verb=Identify" "${TMP}/identify.xml"
granularity=$(getTargetData "granularity" "identify")
checkValidGranularity ${granularity}

# Checks for a last harvest timestamp, and uses it
# according to the granularity settings
# Overrides repository FROM config setting.
if [ ! -z ${LASTTIMESTAMP} ]; then
	checkValidTimestamp ${LASTTIMESTAMP} "YYYY-MM-DDThh:mm:ssZ"
	URI_FROM=$(getFromArgument ${LASTTIMESTAMP} ${granularity})
else
	# in case of first harvest, use the Identify earliestDatestamp
	earliestdatestamp=$(getTargetData "earliestDatestamp" "identify")
	if [ -z ${earliestdatestamp} ]; then
		warning "earliestDatestamp empty, using 1970-01-01T00:00:00Z"
		earliestdatestamp="1970-01-01T00:00:00Z"
	fi
	checkValidTimestamp ${earliestdatestamp} ${granularity}
	URI_FROM=$(getFromArgument ${earliestdatestamp} ${granularity})

	# however, if FROM is set manually in the config, use that
	# this is useful for debugging purposes
	[ ! -z ${FROM} ] && URI_FROM="&from=${FROM}"
fi

# Sets the initial harvest uri
# if resumptiontoken set, this overrides normal behaviour
if [ "${RESUMPTION}" != "" ]; then
	URL="${BASEURL}?verb=${VERB}&resumptionToken=${RESUMPTION}"
else
	URL="${BASEURL}?verb=${VERB}&metadataPrefix=${PREFIX}${URI_SET}${URI_FROM}${URI_UNTIL}"
fi
notice "Starting harvest with PID ${PID} from: ${URL}"

# Now, get the initial page and the records
# if there is a resumptionToken, retrieve other pages
# Set current timestamp for next harvest
startharvestts=$(date -u +'%FT%TZ')
getRecords

# Parse error if present on the first page
ERROR_CODE=$(getTargetData "error_code" "oaipage")
ERROR_MESSAGE=$(getTargetData "error_message" "oaipage")
parseError ${ERROR_CODE} "${ERROR_MESSAGE}"

# Handle resumptionToken
RESUMPTION=$(getTargetData "resumptiontoken" "oaipage")

while [ "${RESUMPTION}" != "" ]; do
	RESUMPTION=$(echo ${RESUMPTION} | sed -f ${INSTALLDIR}/urlescape.sed)
	URL="${BASEURL}?verb=${VERB}&resumptionToken=${RESUMPTION}"
	getRecords
	RESUMPTION=$(getTargetData "resumptiontoken" "oaipage")
done

# When finished, save status
setRepositoryStatus "${REPOSITORY_STATUSFILE}" "${startharvestts}" "$VERSION"

cleanup 0
